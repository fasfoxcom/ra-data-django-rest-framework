{"version":3,"file":"ra-data-django-rest-framework.cjs.production.min.js","sources":["../src/index.ts","../src/tokenAuthProvider.ts"],"sourcesContent":["import { stringify } from 'query-string';\nimport {\n  Identifier,\n  Pagination,\n  Sort,\n  Filter,\n  fetchUtils,\n  DataProvider,\n} from 'ra-core';\n\nexport {\n  default as tokenAuthProvider,\n  fetchJsonWithAuthToken,\n} from './tokenAuthProvider';\n\nconst getPaginationQuery = (pagination: Pagination) => {\n  return {\n    page: pagination.page,\n    page_size: pagination.perPage,\n  };\n};\n\nconst getFilterQuery = (filter: Filter) => {\n  const { q: search, ...otherSearchParams } = filter;\n  return {\n    ...otherSearchParams,\n    search,\n  };\n};\n\nexport const getOrderingQuery = (sort: Sort) => {\n  const { field, order } = sort;\n  return {\n    ordering: `${order === 'ASC' ? '' : '-'}${field}`,\n  };\n};\n\nexport default (\n  apiUrl: String,\n  httpClient: Function = fetchUtils.fetchJson\n): DataProvider => {\n  const getOneJson = (resource: String, id: Identifier) =>\n    httpClient(`${apiUrl}/${resource}/${id}/`).then(\n      (response: Response) => response.json\n    );\n\n  return {\n    getList: async (resource, params) => {\n      const query = {\n        ...getFilterQuery(params.filter),\n        ...getPaginationQuery(params.pagination),\n        ...getOrderingQuery(params.sort),\n      };\n      const url = `${apiUrl}/${resource}/?${stringify(query)}`;\n\n      const { json } = await httpClient(url);\n\n      // Map pk to id\n      json.results.map((item: any) => (item.id = item.pk));\n\n      return {\n        data: json.results,\n        total: json.count,\n      };\n    },\n\n    getOne: async (resource, params) => {\n      const data = await getOneJson(resource, params.id);\n      data.id = data.pk;\n      return {\n        data,\n      };\n    },\n\n    getMany: (resource, params) => {\n      return Promise.all(\n        params.ids.map(id => getOneJson(resource, id))\n      ).then(data => ({ data }));\n    },\n\n    getManyReference: async (resource, params) => {\n      const query = {\n        ...getFilterQuery(params.filter),\n        ...getPaginationQuery(params.pagination),\n        ...getOrderingQuery(params.sort),\n        [params.target]: params.id,\n      };\n      const url = `${apiUrl}/${resource}/?${stringify(query)}`;\n\n      const { json } = await httpClient(url);\n      return {\n        data: json.results,\n        total: json.count,\n      };\n    },\n\n    update: async (resource, params) => {\n      const { json } = await httpClient(`${apiUrl}/${resource}/${params.id}/`, {\n        method: 'PATCH',\n        body: JSON.stringify(params.data),\n      });\n      return { data: json };\n    },\n\n    updateMany: (resource, params) =>\n      Promise.all(\n        params.ids.map(id =>\n          httpClient(`${apiUrl}/${resource}/${id}/`, {\n            method: 'PATCH',\n            body: JSON.stringify(params.data),\n          })\n        )\n      ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n    create: async (resource, params) => {\n      const { json } = await httpClient(`${apiUrl}/${resource}/`, {\n        method: 'POST',\n        body: JSON.stringify(params.data),\n      });\n      return {\n        data: { ...json },\n      };\n    },\n\n    delete: (resource, params) =>\n      httpClient(`${apiUrl}/${resource}/${params.id}/`, {\n        method: 'DELETE',\n      }).then(() => ({ data: params.previousData })),\n\n    deleteMany: (resource, params) =>\n      Promise.all(\n        params.ids.map(id =>\n          httpClient(`${apiUrl}/${resource}/${id}/`, {\n            method: 'DELETE',\n          })\n        )\n      ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n  };\n};\n","import { AuthProvider, fetchUtils } from 'ra-core';\n\nexport interface Options {\n  obtainAuthTokenUrl?: string;\n  tokenKey?: string;\n}\n\nfunction tokenAuthProvider(options: Options = {}): AuthProvider {\n  const opts = {\n    obtainAuthTokenUrl: '/api-token-auth/',\n    tokenKey: 'token',\n    ...options,\n  };\n  return {\n    login: async ({ username, password }) => {\n      const request = new Request(opts.obtainAuthTokenUrl, {\n        method: 'POST',\n        body: JSON.stringify({ username, password }),\n        headers: new Headers({ 'Content-Type': 'application/json' }),\n      });\n      const response = await fetch(request);\n      if (response.ok) {\n        localStorage.setItem('token', (await response.json())[opts.tokenKey]);\n        return;\n      }\n      if (response.headers.get('content-type') !== 'application/json') {\n        throw new Error(response.statusText);\n      }\n\n      const json = await response.json();\n      const error = json.non_field_errors;\n      throw new Error(error || response.statusText);\n    },\n    logout: () => {\n      localStorage.removeItem('token');\n      return Promise.resolve();\n    },\n    checkAuth: () =>\n      localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\n    checkError: error => {\n      const status = error.status;\n      if (status === 401 || status === 403) {\n        localStorage.removeItem('token');\n        return Promise.reject();\n      }\n      return Promise.resolve();\n    },\n    getPermissions: () => {\n      return Promise.resolve();\n    },\n  };\n}\n\nexport function createOptionsFromToken() {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return {};\n  }\n  return {\n    user: {\n      authenticated: true,\n      token: 'Token ' + token,\n    },\n  };\n}\n\nexport function fetchJsonWithAuthToken(url: string, options: object) {\n  return fetchUtils.fetchJson(\n    url,\n    Object.assign(createOptionsFromToken(), options)\n  );\n}\n\nexport default tokenAuthProvider;\n"],"names":["getPaginationQuery","pagination","page","page_size","perPage","getFilterQuery","filter","search","q","getOrderingQuery","sort","ordering","order","field","apiUrl","httpClient","fetchUtils","fetchJson","getOneJson","resource","id","then","response","json","getList","params","query","url","stringify","results","map","item","pk","data","total","count","getOne","getMany","Promise","all","ids","getManyReference","target","update","method","body","JSON","updateMany","responses","create","previousData","deleteMany","options","Object","assign","token","localStorage","getItem","user","authenticated","opts","obtainAuthTokenUrl","tokenKey","login","username","password","request","Request","headers","Headers","fetch","get","Error","statusText","non_field_errors","ok","_localStorage2","setItem","_response$json","logout","removeItem","resolve","checkAuth","reject","checkError","error","status","getPermissions"],"mappings":"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"}